# lynxbot makefile

SHELL=/bin/sh

SRC=src
LIBD=lib

INC=-I./include
CXX=g++
CXXFLAGS+=$(INC) -Wall -Wextra -c -std=c++14
CC=gcc
CFLAGS+=$(INC) -Wall -Wextra -c -std=c99

LDFLAGS=-lcurl -lpthread -lcrypto

COMPDIR=/usr/share/zsh/site-functions

MANFILE=lynxbot.1

_CPR=auth.o cookies.o cprtypes.o digest.o error.o multipart.o parameters.o\
    payload.o proxies.o session.o util.o
CPR=$(patsubst %,$(OBJ)/cpr_%,$(_CPR))
_CPRH=api.h auth.h body.h cookies.h cpr.h cprtypes.h curlholder.h defines.h\
     digest.h error.h multipart.h parameters.h payload.h proxies.h response.h\
     session.h timeout.h util.h
CPRH=$(patsubst %,include/cpr/%,$(_CPRH))
CPRD=$(LIBD)/cpr

JSONCPP=$(OBJ)/js_jsoncpp.o
_JSONH=json.h json-forwards.h
JSONH=$(patsubst %,include/json/%,$(_JSONH))
JSOND=$(LIBD)/json

_LYNXBOT=CmdHandler.o config.o CustomHandler.o EventManager.o\
	 ExpressionParser.o GEReader.o Giveaway.o main.o Moderator.o OpMap.o\
	 RSNList.o SelectionWheel.o skills.o TimerManager.o timers.o\
	 TwitchBot.o URLParser.o
LYNXBOT=$(patsubst %,$(OBJ)/%,$(_LYNXBOT))
_LBH=CmdHandler.h config.h EventManager.h ExpressionParser.h GEReader.h\
     Giveaway.h lynxbot.h Moderator.h OpMap.h RSNList.h SelectionWheel.h\
     skills.h TimerManager.h timers.h TwitchBot.h URLParser.h
LBH=$(patsubst %,$(SRC)/%,$(_LBH))

_LYNXC=client.o cmdparse.o option.o strfmt.o stringparse.o
LYNXC=$(patsubst %,$(OBJ)/%,$(_LYNXC))
_LCH=client.h cmdparse.h option.h strfmt.h stringparse.h
LCH=$(patsubst %,$(SRC)/%,$(_LCH))

_COMMANDS=about.o active.o addcom.o addrec.o age.o calc.o cgrep.o cmdinfo.o\
	  cml.o command.o count.o delcom.o delrec.o duck.o editcom.o ehp.o\
	  eightball.o fashiongen.o ge.o level.o man.o manual.o permit.o rsn.o\
	  setgiv.o setrec.o showrec.o status.o strawpoll.o submit.o twitter.o\
	  uptime.o wheel.o whitelist.o xp.o
COMMANDS=$(patsubst %, $(OBJ)/cmd/%,$(_COMMANDS))
_CMDH=command.h
CMDH=$(patsubst %, $(SRC)/cmd/%,$(_CMDH))

_LIBS=utils.o
LIBS=$(patsubst %,$(OBJ)/%,$(_LIBS))
_LIBH=utils.h
LIBH=$(patsubst %,include/%,$(_LIBH))

_TW=oauth.o base64.o authenticator.o reader.o
TW=$(patsubst %,$(OBJ)/tw_%,$(_TW))
_TWH=oauth.h base64.h authenticator.h reader.h
TWH=$(patsubst %,include/tw/%,$(_TWH))
TWD=$(LIBD)/tw

# lynxbot source
$(OBJ)/%.o: $(SRC)/%.cpp $(LBH) $(LIBH)
	$(CXX) $(CXXFLAGS) -o $@ $<
# lynxc
$(OBJ)/%.o: $(SRC)/%.c $(LCH)
	$(CC) $(CFLAGS) -o $@ $<

$(OBJ)/%.o: $(LIBD)/%.cpp $(LIBH)
	$(CXX) $(CXXFLAGS) -o $@ $<

# commands
$(OBJ)/cmd/%.o: $(SRC)/cmd/%.cpp $(LBH) $(CMDH)
	$(CXX) $(CXXFLAGS) -o $@ $<

$(OBJ)/cmd/%.o: $(SRC)/cmd/%.c $(LCH) $(CMDH)
	$(CXX) $(CXXFLAGS) -o $@ $<

# jsoncpp source
$(OBJ)/js_%.o: $(JSOND)/%.cpp $(JSONH)
	$(CXX) $(CXXFLAGS) -o $@ $<

# cpr source
$(OBJ)/cpr_%.o: $(CPRD)/%.cpp $(CPRH)
	$(CXX) $(CXXFLAGS) -o $@ $<

# tw source
$(OBJ)/tw_%.o: $(TWD)/%.cpp $(TWH)
	$(CXX) $(CXXFLAGS) -o $@ $<

all: objdir binary

# create directory for .o files
objdir:
	@mkdir -p $(OBJ)/cmd

binary: $(CPR) $(JSONCPP) $(LYNXBOT) $(LIBS) $(LYNXC) $(COMMANDS) $(TW)
	$(CXX) -o $(PROGNAME) $(LDFLAGS) $^

FMODE=-m 0644
DMODE=-m 0755
USRGRP=-g $(USR) -o $(USR)

.PHONY: install clean
install: $(PROGNAME)
	install -d -m 0755 $(PREFIX)/bin
	install -g 0 -o 0 $(DMODE) $< $(PREFIX)/bin
	-install -d -m 0755 $(PREFIX)/man/man1
	-install -g 0 -o 0 $(FMODE) misc/$(MANFILE) $(PREFIX)/man/man1
	-gzip -f $(PREFIX)/man/man1/$(MANFILE)
	-mandb -f $(PREFIX)/man/man1/$(MANFILE)
	[ -d $(COMPDIR) ] && cp misc/_lynxbot $(COMPDIR)
	install -d -g $(USR) -o $(USR) $(DMODE) $(CONFDIR)/json $(CONFDIR)/img
	[ -f $(CONFDIR)/config ] || install $(USRGRP) $(FMODE)\
		config.txt $(CONFDIR)/config
	[ -f $(CONFDIR)/giveaway ] || install $(USRGRP) $(FMODE)\
		giveaway.txt $(CONFDIR)/giveaway
	install $(USRGRP) $(FMODE) json/fashion.json $(CONFDIR)/json
	install $(USRGRP) $(FMODE) json/itemids.json $(CONFDIR)/json
	[ -f $(CONFDIR)/json/customcmds.json ] || install $(USRGRP) $(FMODE)\
		json/customcmds.json $(CONFDIR)/json
	[ -f $(CONFDIR)/json/responses.json ] || install $(USRGRP) $(FMODE)\
		json/responses.json $(CONFDIR)/json
	[ -f $(CONFDIR)/json/rsns.json ] || install $(USRGRP) $(FMODE)\
		json/rsns.json $(CONFDIR)/json
	[ -f $(CONFDIR)/json/wheel.json ] || install $(USRGRP) $(FMODE)\
		json/wheel.json $(CONFDIR)/json
	for i in `seq 0 4`; do\
		[ -f $(CONFDIR)/img/back$$i.jpg ] || cp img/back$$i.jpg $(CONFDIR)/img;\
	done

clean:
	rm -f $(PROGNAME) $(OBJ)/*.o $(OBJ)/cmd/*.o
